{
    "openapi": "3.0.1",
    "info": {
        "title": "BeAware Project",
        "description": "",
        "version": "0.1.5"
    },
    "servers": [
        {
            "url": "https://beawareproject.com/api",
            "description": "Live server"
        },
        {
            "url": "http://localhost:8080",
            "description": "Local development"
        }
    ],
    "tags": [
        {
            "name": "Legacy authentication API",
            "description": "There you can get the legacy (self-generated) JWTs, and check if authentication works."
        },
        {
            "name": "Events API",
            "description": "Events that users can report. Only text (mandatory) and photos (additionally)."
        },
        {
            "name": "Tags API",
            "description": "CRUD for tags used in events"
        }
    ],
    "paths": {
        "/tags/{tagId}": {
            "put": {
                "tags": [
                    "Tags API"
                ],
                "summary": "[AUTH REQUIRED] [ADMIN ONLY]",
                "description": "Updates existing tag. Updating tags is only allowed for administrators.",
                "operationId": "putTag",
                "parameters": [
                    {
                        "name": "tagId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagForm"
                            },
                            "example": {
                                "name": "fire",
                                "langtag": "en"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "403": {
                        "description": "Access denied. Modifying tags is only allowed for administrators.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tag not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unathorized. This endpoint requires valid, non-anonymous authentication!",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tags API"
                ],
                "summary": "[AUTH REQUIRED] [ADMIN ONLY]",
                "description": "Deletes existing tag. Deleting tags is only allowed for administrators. ",
                "operationId": "deleteTag",
                "parameters": [
                    {
                        "name": "tagId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Resource deleted"
                    },
                    "403": {
                        "description": "Access denied. Deleting tags is only allowed for administrators.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tag not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unathorized. This endpoint requires valid, non-anonymous authentication!",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    }
                ]
            }
        },
        "/events/{eventId}": {
            "get": {
                "tags": [
                    "Events API"
                ],
                "operationId": "getEvent",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Event not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventDto"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    },
                    {}
                ]
            },
            "put": {
                "tags": [
                    "Events API"
                ],
                "summary": "[AUTH REQUIRED] [ADMIN ONLY]",
                "description": "Updates existing event. Updating events is only allowed for administrators.",
                "operationId": "putEvent",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "404": {
                        "description": "Event not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied. Modifying events is only allowed for administrators.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unathorized. This endpoint requires valid, non-anonymous authentication!",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Events API"
                ],
                "summary": "[AUTH REQUIRED] [ADMIN ONLY]",
                "description": "Deletes existing event. Deleting events is only allowed for administrators.",
                "operationId": "deleteEvent",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Event not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Resource deleted"
                    },
                    "401": {
                        "description": "Unathorized. This endpoint requires valid, non-anonymous authentication!",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied. Deleting events is only allowed for administrators.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    }
                ]
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "Legacy authentication API"
                ],
                "operationId": "register",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDto"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "User with this username already exists!",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tags": {
            "get": {
                "tags": [
                    "Tags API"
                ],
                "operationId": "getTags",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": [
                                "name,ASC"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageTagDto"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    },
                    {}
                ]
            },
            "post": {
                "tags": [
                    "Tags API"
                ],
                "summary": "[AUTH REQUIRED] [ADMIN ONLY]",
                "description": "Creates new tag. Creating tags is only allowed for administrators.",
                "operationId": "postTag",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagForm"
                            },
                            "example": {
                                "name": "fire",
                                "langtag": "en"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagDto"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "This tag already exists.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied. Creating tags is only allowed for administrators.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unathorized. This endpoint requires valid, non-anonymous authentication!",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    }
                ]
            }
        },
        "/events": {
            "get": {
                "tags": [
                    "Events API"
                ],
                "operationId": "getEvents",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": [
                                "time,DESC"
                            ]
                        }
                    },
                    {
                        "name": "rectangleStartLatitude",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "maximum": 90.0,
                            "exclusiveMaximum": false,
                            "minimum": -90.0,
                            "exclusiveMinimum": false,
                            "type": "number"
                        }
                    },
                    {
                        "name": "rectangleStartLongitude",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "maximum": 180.0,
                            "exclusiveMaximum": false,
                            "minimum": -180.0,
                            "exclusiveMinimum": false,
                            "type": "number"
                        }
                    },
                    {
                        "name": "rectangleEndLatitude",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "maximum": 90.0,
                            "exclusiveMaximum": false,
                            "minimum": -90.0,
                            "exclusiveMinimum": false,
                            "type": "number"
                        }
                    },
                    {
                        "name": "rectangleEndLongitude",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "maximum": 180.0,
                            "exclusiveMaximum": false,
                            "minimum": -180.0,
                            "exclusiveMinimum": false,
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageEventDto"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    },
                    {}
                ]
            },
            "post": {
                "tags": [
                    "Events API"
                ],
                "summary": "[AUTH REQUIRED]",
                "description": "Creates new event. Authentication is required.",
                "operationId": "postEvent",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unathorized. This endpoint requires valid, non-anonymous authentication!",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    }
                ]
            }
        },
        "/events/{eventId}/img": {
            "post": {
                "tags": [
                    "Events API"
                ],
                "summary": "[AUTH REQUIRED] [OWNERSHIP GUARD]",
                "description": "Adds image for event. If you are not an administrator, it is possible to add a photo only to the event you authored.",
                "operationId": "postImageForEvent",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "404": {
                        "description": "Event not found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "This image already exists. Each event can have only one image.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied. If you are not an administrator, it is possible to add a photo only to the event you authored.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unathorized. This endpoint requires valid, non-anonymous authentication!",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Used file with invalid media type. Please use image/webp.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    }
                ]
            }
        },
        "/auth/login": {
            "post": {
                "tags": [
                    "Legacy authentication API"
                ],
                "summary": "[LOGIN/PASSWORD REQUIRED] creates and returns refresh and access tokens",
                "operationId": "login",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "401": {
                        "description": "Bad credentials, try again",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Credentials ok, authentication tokens returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Legacy authentication API"
                ],
                "summary": "[REFRESH TOKEN REQUIRED] refreshes and returns refresh and access tokens",
                "operationId": "refreshToken",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token. Please note that the access token is not allowed here, even if it is still active.",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_refresh": []
                    }
                ]
            }
        },
        "/events/{eventId}/img.webp": {
            "get": {
                "tags": [
                    "Events API"
                ],
                "operationId": "getImageForEvent",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Event not found or event has no image",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetail"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "image/webp": {}
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    },
                    {}
                ]
            }
        },
        "/auth/say_hello": {
            "get": {
                "tags": [
                    "Legacy authentication API"
                ],
                "operationId": "testEndpoint",
                "responses": {
                    "401": {
                        "description": "Response when you set the authentication header, but given token is invalid, expired etc. If this happens, you should correct the header or refresh access token, alternatively remove authentication header to switch to anonymous user."
                    },
                    "200": {
                        "description": "Response with authenticated principal or anonymous user information.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "User authenticated": {
                                        "description": "Successfully authenticated",
                                        "value": "Hello, ChuckNorris321, with UUID: 5985729a-6cf3-11ee-b962-0242ac120002!"
                                    },
                                    "Anonymous user": {
                                        "description": "Authentication header NOT provided. Ok, you're just unauthenticated.",
                                        "value": "Hello, unauthenticated"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "legacy_jwt_auth": []
                    },
                    {}
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "TagForm": {
                "required": [
                    "langtag",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 63,
                        "minLength": 3,
                        "type": "string"
                    },
                    "langtag": {
                        "maxLength": 2147483647,
                        "minLength": 2,
                        "type": "string"
                    }
                }
            },
            "ProblemDetail": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "format": "uri"
                    },
                    "title": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "instance": {
                        "type": "string",
                        "format": "uri"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "TagDto": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "maxLength": 63,
                        "minLength": 10,
                        "type": "string"
                    }
                }
            },
            "EventForm": {
                "required": [
                    "deadly",
                    "description",
                    "location",
                    "tagIds"
                ],
                "type": "object",
                "properties": {
                    "location": {
                        "$ref": "#/components/schemas/Location"
                    },
                    "description": {
                        "maxLength": 255,
                        "minLength": 10,
                        "type": "string"
                    },
                    "casualties": {
                        "type": "boolean"
                    },
                    "deadly": {
                        "type": "boolean"
                    },
                    "tagIds": {
                        "maxItems": 3,
                        "minItems": 1,
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "maximum": 3,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "Location": {
                "required": [
                    "latitude",
                    "longitude"
                ],
                "type": "object",
                "properties": {
                    "latitude": {
                        "maximum": 90.0000000,
                        "exclusiveMaximum": false,
                        "minimum": -90.0000000,
                        "exclusiveMinimum": false,
                        "type": "number"
                    },
                    "longitude": {
                        "maximum": 180.0000000,
                        "exclusiveMaximum": false,
                        "minimum": -180.0000000,
                        "exclusiveMinimum": false,
                        "type": "number"
                    }
                }
            },
            "EventDto": {
                "required": [
                    "deadly",
                    "description",
                    "hasImage",
                    "id",
                    "location",
                    "tags",
                    "time",
                    "userDto"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "location": {
                        "$ref": "#/components/schemas/Location"
                    },
                    "description": {
                        "maxLength": 255,
                        "minLength": 10,
                        "type": "string"
                    },
                    "casualties": {
                        "type": "boolean"
                    },
                    "deadly": {
                        "type": "boolean"
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "userDto": {
                        "$ref": "#/components/schemas/UserDto"
                    },
                    "hasImage": {
                        "type": "boolean"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagDto"
                        }
                    }
                }
            },
            "UserDto": {
                "required": [
                    "id",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "username": {
                        "maxLength": 20,
                        "minLength": 3,
                        "type": "string"
                    }
                }
            },
            "UserForm": {
                "required": [
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "maxLength": 20,
                        "minLength": 3,
                        "type": "string"
                    },
                    "password": {
                        "maxLength": 2147483647,
                        "minLength": 8,
                        "type": "string"
                    }
                }
            },
            "LoginResponse": {
                "required": [
                    "access_token",
                    "refresh_token",
                    "user"
                ],
                "type": "object",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/UserDto"
                    },
                    "access_token": {
                        "type": "string"
                    },
                    "refresh_token": {
                        "type": "string"
                    }
                }
            },
            "PageTagDto": {
                "type": "object",
                "properties": {
                    "totalPages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalElements": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "pageable": {
                        "$ref": "#/components/schemas/PageableObject"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "content": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagDto"
                        }
                    },
                    "number": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sort": {
                        "$ref": "#/components/schemas/SortObject"
                    },
                    "numberOfElements": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "first": {
                        "type": "boolean"
                    },
                    "last": {
                        "type": "boolean"
                    },
                    "empty": {
                        "type": "boolean"
                    }
                }
            },
            "PageableObject": {
                "type": "object",
                "properties": {
                    "pageNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sort": {
                        "$ref": "#/components/schemas/SortObject"
                    },
                    "paged": {
                        "type": "boolean"
                    },
                    "unpaged": {
                        "type": "boolean"
                    }
                }
            },
            "SortObject": {
                "type": "object",
                "properties": {
                    "sorted": {
                        "type": "boolean"
                    },
                    "empty": {
                        "type": "boolean"
                    },
                    "unsorted": {
                        "type": "boolean"
                    }
                }
            },
            "PageEventDto": {
                "type": "object",
                "properties": {
                    "totalPages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalElements": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "pageable": {
                        "$ref": "#/components/schemas/PageableObject"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "content": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventDto"
                        }
                    },
                    "number": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sort": {
                        "$ref": "#/components/schemas/SortObject"
                    },
                    "numberOfElements": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "first": {
                        "type": "boolean"
                    },
                    "last": {
                        "type": "boolean"
                    },
                    "empty": {
                        "type": "boolean"
                    }
                }
            }
        },
        "securitySchemes": {
            "legacy_jwt_auth": {
                "type": "http",
                "description": "Legacy user authentication option. You can obtain authentication token by POST /auth/login/ (firstly) or PATCH /auth/login/ (every subsequent time).",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            },
            "legacy_jwt_refresh": {
                "type": "http",
                "description": "Special authentication option that allows you to authorize only when performing PATCH /auth/login/ request, where you can obtain refreshed access token (legacy_jwt_auth).",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}